import os
import asyncio
import random
from loguru import logger
from src.gaszip import Gaszip
from src.utils.config import Config, read_private_keys, read_proxies
from src.utils.log import logger


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
transaction_queue = asyncio.Queue()

async def send_transaction(gaszip, attempt=1):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    try:
        await gaszip.random_bridge()
        return True  # –£—Å–ø–µ—Ö
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}. –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{Config.MAX_RETRIES}")
        if attempt < Config.MAX_RETRIES:
            await asyncio.sleep(2**attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (2, 4, 8... —Å–µ–∫)
            return await send_transaction(gaszip, attempt + 1)
        return False  # –ü—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫

async def process_account(account_index, private_key, proxy, semaphore):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {account_index}: –∑–∞–ø—É—Å–∫...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gaszip
    gaszip = Gaszip(
        account_index=account_index,
        proxy=proxy,
        private_key=private_key,
    )

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ N —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    success_count = 0
    while success_count < Config.TARGET_TX:
        async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            success = await send_transaction(gaszip)
            if success:
                success_count += 1
                logger.success(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_index}: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count}/{Config.TARGET_TX} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                await transaction_queue.put((account_index, success_count))

        sleep_time = random.uniform(*Config.SLEEP_AFTER_TX)
        logger.debug(f"‚è≥ –ê–∫–∫–∞—É–Ω—Ç {account_index}: –ø–∞—É–∑–∞ {sleep_time:.2f} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π...")
        await asyncio.sleep(sleep_time)
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
    await gaszip.close()


async def main():
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è main.py
    base_dir = os.path.dirname(os.path.abspath(__file__))

    # –ß—Ç–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏ –ø—Ä–æ–∫—Å–∏
    private_keys = read_private_keys(base_dir)
    proxies = read_proxies(base_dir)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π <= –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–∫—Å–∏
    if proxies is not None and len(private_keys) > len(proxies):
        logger.error("üö® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π.")
        return

    semaphore = asyncio.Semaphore(Config.SEMAPHORE_LIMIT)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

    # –ó–∞–ø—É—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    tasks = [
        process_account(account_index, private_key, proxy, semaphore)
        for account_index, (private_key, proxy) in enumerate(zip(private_keys, proxies if proxies else [None] * len(private_keys)))
    ]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(*tasks)

async def shutdown():
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º"""
    logger.warning("\n–í—ã—Ö–æ–¥... –ü–æ–¥—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    transaction_counts = {}
    while not transaction_queue.empty():
        account_index, count = await transaction_queue.get()
        transaction_counts[account_index] = count
    
    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    for account_index, count in sorted(transaction_counts.items()):
        logger.info(f"üîπ –ê–∫–∫–∞—É–Ω—Ç {account_index}: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.warning("\n\n\n[!] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ! –û–∂–∏–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...\n\n\n")
        asyncio.run(shutdown())  # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
