import os
import json
import asyncio
import aiohttp
from eth_account import Account
from loguru import logger
from src.utils.config import read_private_keys, read_proxies


async def claim_gas(session: aiohttp.ClientSession, address: str, proxy: str, tier: int = 100) -> dict:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –¥–ª—è claim –≥–∞–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    url = f"https://backend.gas.zip/v2/monadEligibility/{address}?claim=true" + (f"&tier={tier}" if tier else "")

    try:
        async with session.get(url, proxy=f"http://{proxy}" if proxy else None) as response:
            if response.status == 200:
                response_data = await response.text()
                return json.loads(response_data)  # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
            else:
                logger.error(f"[{address}] ‚ùå HTTP Error: {response.status}")
                return {"error": f"HTTP Error: {response.status}"}
    except Exception as e:
        logger.exception(f"[{address}] ‚ùå Request failed: {str(e)}")
        return {"error": f"Request failed: {str(e)}"}


async def claim_with_fallbacks(session: aiohttp.ClientSession, address: str, proxy: str):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–ª–µ–π–º–∞ –≥–∞–∑–∞ —Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω—ã–º —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º tier –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏.
    """
    tiers = [100, 50, 25, 10, None]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ tier
    for tier in tiers:
        result = await claim_gas(session, address, proxy, tier)
        
        if "eligibility" in result:
            if result["eligibility"] == "CLAIMED":
                logger.success(f"[{address}] ‚úÖ Gas —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–ª–µ–π–º–µ–Ω.")
                return result
            else:
                logger.info(f"[{address}] ‚ö†Ô∏è Gas –µ—â–µ –Ω–µ –±—ã–ª –∑–∞–∫–ª–µ–π–º–µ–Ω –Ω–∞ tier={tier}. –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
        else:
            logger.error(f"[{address}] ‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')} –Ω–∞ tier={tier}")

    logger.error(f"[{address}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–ª–µ–π–º–∏—Ç—å gas –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.")
    return {"error": "All tiers failed"}


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""

    # –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
    base_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –ß—Ç–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏ –ø—Ä–æ–∫—Å–∏
    private_keys = read_private_keys(base_dir)
    proxies = read_proxies(base_dir)

    if not proxies:
        proxies = [None] * len(private_keys)  # –î–æ–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ `None`, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–ª–µ–π–º–∞ –≥–∞–∑–∞...")

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é aiohttp
    async with aiohttp.ClientSession() as session:
        # –ó–∞–ø—É—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        tasks = []
        for account_index, (private_key, proxy) in enumerate(zip(private_keys, proxies)):
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            address = Account.from_key(private_key).address
            logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_index}] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–ª–µ–π–º–∞ ({address})...")

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
            tasks.append(claim_with_fallbacks(session, address, proxy))

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(*tasks)


if __name__ == "__main__":
    asyncio.run(main())
